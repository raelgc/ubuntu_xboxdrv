# Xboxdrv Controller workers
# this is here to allow the addressing of a single job (ubuntu-xboxdrv)
stop on stopping ubuntu-xboxdrv

instance $ID

# Shortcut variable
env DEFAULT="/etc/default/xboxdrv"
script
    # Read configuration variable file if it is present
    if [ -f $DEFAULT ] ; then
        . $DEFAULT
    fi
    # this will store all system pad options from /etc/default/xboxdrv
    PAD_OPTIONS="--silent --dbus disabled --daemon"
    
    # checking if user has enabled forcefeedback
    if [ "$FORCE_FEEDBACK" = true ] ; then
        PAD_OPTIONS="$PAD_OPTIONS --force-feedback"
    fi

    # checking if user has enabled mimic_xpad
    if [ "$MIMIC_XPAD" = true ] ; then
        PAD_OPTIONS="$PAD_OPTIONS --mimic-xpad --mimic-xpad-wireless"
    fi
    # adding --detache-kernel-driver
    PAD_OPTIONS="$PAD_OPTIONS --detach-kernel-driver"

    # store our instance name, this is either an int from ubuntu-xboxdrv signifying
    # - the parent started the controller, or a vendor:product pair from a udev rule
    # NOTE: this is on purpose, for either debugging later or user info :)
    SLOT_ID="$ID"

    # if detected that udev rule launched this instance, determine which controller
    # - was connected
    if [ ${#SLOT_ID} -gt 5 ] ; then
        # Redefine slot number as the appropriate number
        SLOT_ID="$( grep CONTROLLER.=.$SLOT_ID $DEFAULT | cut -c 11 )"
    fi
    # create arguemts for xboxdrv to identify process to controller
    INS_ARGS="--id $(($SLOT_ID-1)) --wid $(($SLOT_ID-1)) --led $(($SLOT_ID+1))"

    # get the controller options for slot number $SLOT_ID, since it is now
    # - just the corresponding number
    M_CONTROLLER_OPTIONS="$( grep CONTROLLER$SLOT_ID.OPTIONS= $DEFAULT | cut -d '"' -f2 )"

    # store all xboxdrv arguements
    ARGS="$XBOXDRV_OPTIONS $PAD_OPTIONS $INS_ARGS $M_CONTROLLER_OPTIONS"

    # start xboxdrv with appropriate arguements
    exec xboxdrv $ARGS
end script

# start parent if not already
post-start exec start ubuntu-xboxdrv
