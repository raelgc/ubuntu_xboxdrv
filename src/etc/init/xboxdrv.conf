# Xboxdrv Controller

# This is the job name, which will be the vendor:product id of the controller
instance $ID

# stop controller instance when controller is disconnected
stop on usb-device-removed ID_VENDOR_ID=${dv} ID_MODEL_ID=${dp}

pre-start script
    # remove problematic js device files
    if [ $(ps -e | grep -c xbox) -lt 1 ] ; then
        rm -f /dev/input/js*
    fi
end script
# Shortcut variable
env DEFAULT="/etc/default/xboxdrv"
script
    # Read configuration variable file if it is present
    if [ -f $DEFAULT ] ; then
        . $DEFAULT
    fi
    # this will store all system pad options from /etc/default/xboxdrv
    PAD_OPTIONS="--silent --dbus system --daemon"
    
    # checking if user has enabled forcefeedback
    if [ "$FORCE_FEEDBACK" = true ] ; then
        PAD_OPTIONS="$PAD_OPTIONS --force-feedback"
    fi

    # checking if user has enabled mimic_xpad
    if [ "$MIMIC_XPAD" = true ] ; then
        PAD_OPTIONS="$PAD_OPTIONS --mimic-xpad --mimic-xpad-wireless"
    fi
    # adding --detache-kernel-driver
    PAD_OPTIONS="$PAD_OPTIONS --detach-kernel-driver"

    # determine which option slot were using
    SLOT_ID="$( grep CONTROLLER.=.$ID $DEFAULT | cut -c 11 )"

    # get the controller options for slot number $SLOT_ID
    M_CONTROLLER_OPTIONS="$( grep CONTROLLER$SLOT_ID.OPTIONS $DEFAULT | cut -d '"' -f2 )"

    # store all xboxdrv arguements
    ARGS="$XBOXDRV_OPTIONS $PAD_OPTIONS $INS_ARGS $M_CONTROLLER_OPTIONS"

    # start xboxdrv with appropriate arguements
    exec xboxdrv $ARGS
end script
